-- Creating Datbase For Amazon Services : 


CREATE TABLE category(
	category_id	INT PRIMARY KEY,
	category_name VARCHAR(25)
); 

CREATE TABLE products(
	product_id INT PRIMARY KEY ,
	product_name VARCHAR(50),
	price FLOAT ,	
	cogs FLOAT,
	category_id INT --FK
); 

CREATE TABLE customers(
	Customer_ID INT PRIMARY KEY,
	first_name VARCHAR(25),	
	last_name VARCHAR(25),
	Customer_state VARCHAR(25),
	address VARCHAR(25) DEFAULT ('xxxxx')
); 

CREATE TABLE order_items (
    order_item_id INT PRIMARY KEY,
    order_id INT, --FK
    product_id INT, --FK
    quantity INT,
    price_per_unit FLOAT
);


CREATE TABLE sellers (
	seller_id INT PRIMARY KEY,
	seller_name VARCHAR(25),
	origin VARCHAR(25)
); 

CREATE TABLE shipping(
	shipping_id INT PRIMARY KEY,
	order_id INT, --FK
	shipping_date DATE,
	return_date DATE,
	shipping_providers VARCHAR(25),
	delivery_status VARCHAR(25)
); 

CREATE TABLE payments(
	payment_id INT PRIMARY KEY,
	order_id INT, --FK
	payment_date DATE,
	payment_status VARCHAR(25)
); 

CREATE TABLE inventory(
	inventory_id INT PRIMARY KEY,
	product_id INT, --FK
	stock INT,
	warehouse_id INT,
	last_stock_date DATE 
); 

CREATE TABLE orders(
	order_id INT PRIMARY KEY,
	order_date DATE,
	customer_id INT, --FK
	seller_id INT,--FK
	order_status VARCHAR(25)
); 

-- Adding FOREIGN KEY TO TABLES : 

ALTER TABLE orders
ADD FOREIGN KEY (customer_id) REFERENCES customers(Customer_ID) ON DELETE CASCADE ;

ALTER TABLE orders
ADD FOREIGN KEY (seller_id) REFERENCES sellers(seller_id) ON DELETE CASCADE ;

ALTER TABLE inventory 
ADD FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE ;

ALTER TABLE payments
ADD FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE ;

ALTER TABLE shipping
ADD FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE ;

ALTER TABLE products
ADD FOREIGN KEY (category_id) REFERENCES category(category_id) ON DELETE CASCADE ;

ALTER TABLE order_items
ADD FOREIGN KEY (order_id) REFERENCES orders(order_id) ON DELETE CASCADE ;

ALTER TABLE order_items
ADD FOREIGN KEY (product_id) REFERENCES products(product_id) ON DELETE CASCADE ;

-- Checking Every Table is added perfectly or not .

SELECT * FROM category;
SELECT * FROM customers;
SELECT * FROM inventory;
SELECT * FROM order_items;
SELECT * FROM orders;
SELECT * FROM payments;
SELECT * FROM products;
SELECT * FROM sellers;
SELECT * FROM shipping;

-- ANALYSIS AND SOLVING ANALYTICAL PROBLEMS RELATED TO AMAZON DATASET : 

/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/

ALTER TABLE order_items
ADD COLUMN price_accor_quantity FLOAT;

UPDATE order_items
SET price_accor_quantity = quantity * price_per_unit;

SELECT 
	oi.product_id, 
	p.product_name ,
	count(oi.order_id) AS total_quantity ,
	SUM(oi.price_accor_quantity) AS Total_Sale_Value
FROM 
	 order_items oi 
JOIN products p ON oi.product_id = p.product_id 
GROUP BY 1 , 2 
ORDER BY 4 DESC
LIMIT 10;  


/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Challenge: Include the percentage contribution of each category to total revenue.
*/

SELECT * FROM category;
SELECT* FROM products;
SELECT * FROM order_items ;

SELECT SUM(price_accor_quantity) INTO v_total_revenue FROM order_items ;

SELECT 
	c.category_id ,
	c.category_name ,
	SUM(oi.price_accor_quantity) AS Total_Sale_Value,
	(SUM(oi.price_accor_quantity) /(SELECT SUM(price_accor_quantity) FROM order_items ))*100  AS Contribution
FROM
	order_items oi
JOIN products p ON  oi.product_id = p.product_id 
JOIN category c ON p.category_id = c.category_id 
GROUP BY 1,2
ORDER BY 3 desc;


/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Challenge: Include only customers with more than 5 orders.
*/

SELECT * FROM customers ORDER BY customer_id;
SELECT * FROM orders ORDER BY customer_id;
SELECT * FROM order_items;

SELECT
	c.customer_id ,
	c.first_name ,
	c.last_name ,
	COUNT(o.order_id) AS no_of_orders , 
	(SUM(price_accor_quantity)/COUNT(o.order_id)) AS avg_order_value 
FROM 
	customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id 
GROUP BY 1,2,3
HAVING COUNT(o.order_id) > 5 
ORDER BY 1 ;

/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
Challenge: Display the sales trend, grouping by month, return current_month sale, last month sale!
*/

SELECT 
	Years,
	Months ,
	no_of_orders ,
	Current_Month_Sale,
	LAG(Current_Month_Sale) OVER() AS Previous_Month_Sale
FROM 
(SELECT
	EXTRACT (Year FROM o.order_date) AS Years ,
	EXTRACT (Month  FROM o.order_date) AS Months ,
	count(o.order_id) AS no_of_orders ,
	ROUND
		(SUM(oi.price_accor_quantity)::numeric , 2) AS Current_Month_Sale
 FROM
	orders AS o
JOIN order_items oi ON o.order_id = oi.order_id 
GROUP BY 1 , 2
HAVING 
	EXTRACT (Year FROM o.order_date) < EXTRACT(YEAR FROM CURRENT_DATE)
	AND
	EXTRACT (Year FROM o.order_date) > EXTRACT (YEAR FROM (CURRENT_DATE - INTERVAL '2 years')) 
ORDER BY 1)
;



/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.
Challenge: List customer details and the time since their registration.
*/

SELECT * FROM customers ORDER BY customer_id ;
SELECT * FROM orders  ORDER BY customer_id ;

SELECT 
	c.* 
FROM 
	customers c 
LEFT JOIN orders o ON c.customer_id = o.customer_id 
WHERE o.order_id IS NULL 
ORDER BY c.customer_id ; 


/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/

SELECT * FROM category ;
SELECT * FROM products;
SELECT * FROM orders;
SELECT * FROM order_items;
SELECT * FROM customers ;

SELECT * FROM (
SELECT 
	cs.customer_state , 
	c.category_name,
	ROUND(SUM(oi.price_accor_quantity)::numeric,2) AS Total_sells,
	DENSE_RANK() OVER(PARTITION BY cs.customer_state ORDER BY SUM(oi.price_accor_quantity)) AS rank_category 
FROM 
	category c
JOIN products p ON c.category_id = p.category_id 
JOIN order_items oi ON p.product_id = oi.product_id 
JOIN orders o ON oi.order_id = o.order_id 
JOIN customers cs ON o.customer_id = cs.customer_id
GROUP BY 1,2
ORDER BY  4
) 
WHERE rank_category = 1 
ORDER BY 4 ;

--WITH THE USE OF CTE : 

WITH least_selling_state AS
(
SELECT 
	cs.customer_state , 
	c.category_name,
	ROUND(SUM(oi.price_accor_quantity)::numeric,2) AS Total_sells,
	DENSE_RANK() OVER(PARTITION BY cs.customer_state ORDER BY SUM(oi.price_accor_quantity)) AS rank_category 
FROM 
	category c
JOIN products p ON c.category_id = p.category_id 
JOIN order_items oi ON p.product_id = oi.product_id 
JOIN orders o ON oi.order_id = o.order_id 
JOIN customers cs ON o.customer_id = cs.customer_id
GROUP BY 1,2
ORDER BY  4
)

SELECT * FROM least_selling_state WHERE rank_category = 1 ORDER BY 4 ; 

/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Challenge: Rank customers based on their CLTV.
*/

SELECT * FROM customers ;
SELECT * FROM order_items ;
SELECT * FROM orders ORDER BY customer_id;

SELECT 
	c.customer_id ,
	CONCAT(c.first_name , ' ', c.last_name) AS Full_Name,
	ROUND(SUM(oi.price_accor_quantity)::numeric,2) AS Customer_Lifetime_Value,
	DENSE_RANK() OVER(ORDER BY ROUND(SUM(oi.price_accor_quantity)::numeric, 2) DESC) AS CLTV_Rank  -- Got Some Problem in the ranking first solved woth help of GPT.
FROM 
	customers c 
JOIN orders o ON c.customer_id = o.customer_id 
JOIN order_items oi ON o.order_id = oi.order_id 
GROUP BY 1
;

/*
8. Inventory Stock Alerts
Query products with stock levels below a certain threshold (e.g., less than 10 units).
Challenge: Include last restock date and warehouse information.
*/

SELECT 
	i.inventory_id,
	p.product_name,
	i.stock as current_stock_left,
	i.last_stock_date,
	i.warehouse_id
FROM 
	inventory as i
JOIN products as p ON p.product_id = i.product_id
WHERE stock < 10

/*
9. Shipping Delays
Identify orders where the shipping date is later than 3 days after the order date.
Challenge: Include customer, order details, and delivery provider.
*/

SELECT * FROM customers ;
SELECT * FROM orders ;
SELECT * FROM shipping ;

SELECT 
	c.customer_id,
	CONCAT(c.first_name , ' ' , c.last_name) AS customer_full_name, 
	o.order_id,
	o.order_status,
	s.shipping_providers,
	o.order_date,
	s.shipping_date,
	(s.shipping_date - o.order_date) AS no_of_days_to_ship
FROM 
	customers c
JOIN orders o ON c.customer_id = o.customer_id 
JOIN shipping s ON o.order_id = s.order_id 
WHERE s.shipping_date > (order_date + INTERVAL '3 Days')
ORDER BY (s.shipping_date - o.order_date) desc;

/*
10. Payment Success Rate 
Calculate the percentage of successful payments across all orders.
Challenge: Include breakdowns by payment status (e.g., failed, pending).
*/

SELECT * FROM orders;
SELECT SUM(price_accor_quantity) FROM order_items;

SELECT
	p.payment_status,
	SUM(oi.price_accor_quantity) AS Total_sale,    --below can use variable also
	ROUND((SUM(oi.price_accor_quantity)::numeric/(SELECT SUM(price_accor_quantity) FROM order_items)::numeric * 100 ),2) AS Total_sales_perceentage 
FROM 
	orders o 
JOIN payments p ON o.order_id = p.order_id 
JOIN order_items oi ON o.order_id = oi.order_id 
GROUP BY 1
ORDER BY 3 DESC ;

/*
11. Top Performing Sellers
Find the top 5 sellers based on total sales value.
Challenge: Include both successful and failed orders, and display their percentage of successful orders.
*/

SELECT * FROM sellers;
SELECT * FROM orders;
SELECT * FROM order_items;

SELECT
	s.seller_id ,
	s.seller_name ,
	s.origin ,
	ROUND(((COUNT(o.order_status)::numeric/(SELECT COUNT(order_status) FROM orders )::numeric)*100),2)  AS Percentage_Succesfull_Order ,
	SUM(oi.price_accor_quantity) AS Total_Sales_Value
FROM 
	sellers s 
JOIN orders o ON s.seller_id = o.seller_id
JOIN order_items oi ON o.order_id = oi.order_id 
WHERE o.order_status = 'Completed'
GROUP BY 1,2,3
ORDER BY 5 DESC
LIMIT 5
;

SELECT COUNT(order_status) FROM orders;

/*
12. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Challenge: Rank products by their profit margin, showing highest to lowest.
*/     -- GOOD QUESTION 


SELECT 
	product_id,
	product_name,
	profit_margin,
	DENSE_RANK() OVER( ORDER BY profit_margin DESC) as product_ranking
FROM
(SELECT 
	p.product_id,
	p.product_name,
	SUM(oi.price_accor_quantity - (p.cogs * oi.quantity))::numeric/sum(oi.price_accor_quantity) * 100 as profit_margin
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
GROUP BY 1, 2
) 


/*
13. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/

SELECT * FROM order_items;
SELECT * FROM orders;
SELECT * FROM products;
SELECT DISTINCT order_status FROM orders; 

SELECT product_id , count(order_id) FROM order_items GROUP BY 1 ORDER BY 2 DESC;

SELECT
	t1.product_id, 
	t1.product_name, 
	no_of_product_returned ,
	Total_no_of_product_sold ,
	ROUND(((no_of_product_returned::numeric/Total_no_of_product_sold::numeric)*100),2) AS percentage_rate_return 
FROM (
(SELECT 
	p.product_id  ,
	p.product_name ,
	count(o.order_id) AS no_of_product_returned
FROM 
	orders o 
JOIN order_items oi ON o.order_id = oi.order_id 
JOIN products p ON oi.product_id = p.product_id
WHERE o.order_status = 'Returned'
GROUP BY 1,2) AS t1
JOIN
(SELECT 
	p.product_id,
	p.product_name,
	count(o.order_id) AS Total_no_of_product_sold
FROM 
	orders o 
JOIN order_items oi ON o.order_id = oi.order_id 
JOIN products p ON oi.product_id = p.product_id
GROUP BY 1,2) AS t2
ON 
t1.product_id = t2.product_id)
ORDER BY 3 DESC , 5 DESC 
LIMIT 10;


/*
14. Orders Pending Shipment
Find orders that have been paid but are still pending shipment.
Challenge: Include order details, payment date, and customer information.
*/

SELECT * FROM payments;
SELECT * FROM shipping;
SELECT * FROM customers;
SELECT * FROM orders;
SELECT DISTINCT delivery_status FROM shipping;

SELECT 
	o.* ,
	c.* ,
	p.payment_date
FROM 
	customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN payments p ON o.order_id = p.order_id 
LEFT JOIN shipping s ON p.order_id = s.order_id
WHERE p.payment_status = 'Payment Successed' AND s.delivery_status = 'Shipped' ; 

/*
15. Inactive Sellers
Identify sellers who haven’t made any sales in the last 6 months.
Challenge: Show the last sale date and total sales from those sellers.
*/

SELECT * FROM order_items ;
SELECT * FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.seller_id = 9 ORDER BY o.order_date desc limit 1;
SELECT * FROM sellers;
SELECT DISTINCT seller_id FROM orders;

SELECT 
	t1.seller_id,
	t1.seller_name,
	t1.last_sale_date,
	t1.total_sales,
	t2.last_sale_ammount
FROM
(SELECT
	s.seller_id , 
	s.seller_name , 
	MAX(o.order_date) AS last_sale_date , 
	ROUND(SUM(oi.price_accor_quantity)::numeric,2)  AS Total_sales FROM order_items oi 
JOIN orders o ON oi.order_id = o.order_id 
LEFT JOIN sellers s ON o.seller_id = s.seller_id 
GROUP BY 1,2
HAVING MAX(o.order_date) <= CURRENT_DATE - INTERVAL '6 months'
ORDER BY 1) AS t1
JOIN
(SELECT * FROM (
SELECT 
	s.seller_id , 
	oi.price_accor_quantity AS last_sale_ammount , 
	MAX(o.order_date) , 
	DENSE_RANK() OVER(PARTITION BY s.seller_id ORDER BY MAX(o.order_date) DESC) AS RANK  
FROM 
	orders o 
JOIN order_items oi ON o.order_id = oi.order_id
LEFT JOIN sellers s ON o.seller_id = s.seller_id 
GROUP BY 1 , 2 
ORDER BY 1 , 3 desc
)WHERE RANK = 1) AS t2 ON t1.seller_id = t2.seller_id;

/*
16. IDENTITY customers into returning or new
if the customer has done more than 5 return categorize them as returning otherwise new
Challenge: List customers id, name, total orders, total returns
*/

SELECT
	*
FROM
	customers;
SELECT DISTINCT customer_id FROM orders ;
SELECT DISTINCT order_status FROM orders ;

SELECT
	t1.customer_full_name,
	t1.total_no_of_orders,
	COALESCE(t2.total_no_of_orders_returned,0) AS total_no_of_orders_returned ,
	CASE WHEN t2.total_no_of_orders_returned > 5 THEN 'returning'
	ELSE 'new'
	END AS customer_category
FROM
(SELECT 
	c.customer_id ,
	CONCAT(c.first_name , ' ' , c.last_name ) AS customer_full_name,
	count(o.order_id) AS Total_no_of_orders 
FROM
	orders o
LEFT JOIN customers c ON o.customer_id = c.customer_id 
GROUP BY 1 
ORDER BY 2 DESC)AS t1
LEFT JOIN
(SELECT 
	c.customer_id,
	count(o.order_status) AS Total_no_of_orders_returned
FROM
	orders o
LEFT JOIN customers c ON o.customer_id = c.customer_id 
WHERE o.order_status = 'Returned'
GROUP BY 1
ORDER BY 2 DESC) AS t2 ON t1.customer_id = t2.customer_id
ORDER BY 1
;


/*
17. Cross-Sell Opportunities
Find customers who purchased product A but not product B (e.g., customers who bought AirPods but not AirPods Max).
Challenge: Suggest cross-sell opportunities by displaying matching product categories.
*/

SELECT * FROM customers;
SELECT * FROM order_items;
SELECT * FROM orders;
SELECT * FROM products;
SELECT DISTINCT product_name FROM products ORDER BY product_name;


WITH airpods_max AS (
    SELECT
        o.customer_id,
        p.product_id,
        p.product_name,
        oi.order_id
    FROM 
        orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    WHERE p.product_name = 'Apple AirPods Max'
), 
airpods_other AS (
    SELECT
        o.customer_id,
        p.product_id,
        p.product_name,
        oi.order_id
    FROM 
        orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN products p ON oi.product_id = p.product_id
    WHERE p.product_name LIKE 'Apple AirPods %' AND p.product_name != 'Apple AirPods Max'
)

SELECT DISTINCT ai.customer_id, p.product_name
FROM products p
JOIN airpods_other ai ON ai.product_name = p.product_name
LEFT JOIN airpods_max am ON  p.product_name = am.product_name;


/*
18. Top 5 Customers by Orders in Each State
Identify the top 5 customers with the highest number of orders for each state.
Challenge: Include the number of orders and total sales for each customer.
*/

SELECT * FROM customers;
SELECT * FROM orders;
SELECT * FROM order_items;
SELECT DISTINCT customer_state FROM customers;

SELECT 
	Customer_full_name,
	customer_state,
	Total_no_of_orders,
	Total_sales,
	RANKS
FROM (
SELECT 
	CONCAT(c.first_name , ' ' , c.last_name) AS Customer_full_name,
	c.customer_state,
	COUNT(o.order_id) AS Total_no_of_orders,
	ROUND(SUM(oi.price_accor_quantity)::numeric,2) AS Total_sales,
	DENSE_RANK() OVER(PARTITION BY c.customer_state ORDER BY COUNT(o.order_id) DESC ) AS RANKS
FROM orders o 
JOIN order_items oi ON o.order_id = oi.order_id
LEFT JOIN customers c ON o.customer_id = c.customer_id
GROUP BY 1,2) 
WHERE RANKS <= 5;

-- 1 DOUBT WHY WE CAN NOT TAKE CUSTOMER_ID IN THIS I ALSO HAVE THE SAME DOUBT FOR THE ABOVE QUESTION ALSO.

/*
19. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/

SELECT DISTINCT shipping_providers FROM shipping

SELECT
	COALESCE(s.shipping_providers,'Unknown') , 
	count(o.order_id) AS Total_number_of_orders ,
	ROUND(SUM(oi.price_accor_quantity)::numeric,2) AS Total_revenue_handeled ,
	ROUND(COALESCE((AVG(s.shipping_date - o.order_date)),0),2) AS AVG_no_of_days_taken 
FROM  orders o 
JOIN order_items oi ON o.order_id = oi.order_id
LEFT JOIN shipping s ON oi.order_id = s.order_id
GROUP BY 1;


/*
20. Top 10 product with highest decreasing revenue ratio compare to last year(2022) and current_year(2023)
Challenge: Return product_id, product_name, category_name, 2022 revenue and 2023 revenue decrease ratio at end Round the result

Note: Decrease ratio = cr-ls/ls* 100 (cs = current_year ls=last_year)
*/

SELECT * FROM products;

SELECT 
	t1.product_id,
	t1.product_name,
	t1.category_name,
	revenue_2022,
	revenue_2023,
	ROUND(((revenue_2023 - revenue_2022)::numeric/(revenue_2022)::numeric *100),2) AS Decrease_ratio_2023
FROM 
	(
(SELECT 
	p.product_id ,
	p.product_name,
	c.category_name,
	SUM(oi.price_accor_quantity) AS revenue_2022
FROM 
	orders o
JOIN order_items oi ON o.order_id = oi.order_id 
JOIN products p ON oi.product_id = p.product_id 
LEFT JOIN category c ON p.category_id = c.category_id
WHERE EXTRACT(YEAR FROM order_date) = 2022 
GROUP BY 1,2,3
) AS t1
JOIN
(SELECT
	p.product_id ,
	p.product_name,
	c.category_name,
	SUM(oi.price_accor_quantity) AS revenue_2023
FROM 
	orders o 
JOIN order_items oi ON o.order_id = oi.order_id 
JOIN products p ON oi.product_id = p.product_id 
LEFT JOIN category c ON p.category_id = c.category_id
WHERE EXTRACT(YEAR FROM order_date) = 2023
GROUP BY 1,2,3
) as t2 ON t1.product_id = t2.product_id )
WHERE 
	revenue_2022 > revenue_2023
ORDER BY 6 DESC
LIMIT 10;


/*
Final Task
-- Store Procedure
create a function as soon as the product is sold the the same quantity should reduced from inventory table
after adding any sales records it should update the stock in the inventory table based on the product and qty purchased
-- 

*/

SELECT * FROM inventory WHERE product_id = 1;
SELECT * FROM orders WHERE order_id = 22000;
SELECT * FROM order_items;
SELECT * FROM  products;

CREATE OR REPLACE PROCEDURE stock_maintanance( 
	p_order_item_id INT,
    p_order_id INT,
	p_customer_id INT,
	p_seller_id INT,
    p_product_id INT,
    p_quantity INT
     )
LANGUAGE plpgsql
AS $$

DECLARE 
v_count INT;
v_price INT;
v_product VARCHAR(50);

BEGIN

SELECT
	COUNT(*)
	INTO
	v_count
FROM  inventory 
WHERE product_id = p_product_id AND stock >= p_quantity;

SELECT
	price 
	INTO
	v_price
FROM 
	products
WHERE product_id = p_product_id;

SELECT 
	product_name 
	INTO
	v_product
FROM
	products 
WHERE product_id = p_product_id;

IF v_count > 0 THEN

INSERT INTO orders(order_id , order_date , customer_id , seller_id)
VALUES (p_order_id , CURRENT_DATE , p_customer_id , p_seller_id);

INSERT INTO order_items(order_item_id , order_id , product_id , quantity , price_per_unit , price_accor_quantity )
VALUES (p_order_item_id , p_order_id , p_product_id , p_quantity , v_price , p_quantity*v_price );

UPDATE inventory
SET stock = stock - p_quantity
WHERE product_id = p_product_id;

RAISE NOTICE 'Congratulations ! Your Order of % % Has been Placed .',p_quantity , v_product;

ELSE 

RAISE NOTICE 'SORRY ! % PRODUCT IS NOT AVAILABLE RIGHT NOW.',v_product;

END IF;


END;
$$

CALL stock_maintanance( 
	22000,
    22000,
	7,
	2,
    1,
    41
     );

DROP PROCEDURE IF EXISTS stock_maintanance( 
	p_order_item_id INT,
    p_order_id INT,
	p_customer_id INT,
	p_seller_id INT,
    p_product_id INT,
    p_quantity INT
     );
